{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","App.module.css","components/Section/Section.js","Redux/contacts/contacts-actions.js","Redux/contacts/contacts-operations.js","Redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","Redux/contacts/contacts-reducers.js","Redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Section","children","className","styles","section","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","axios","defaults","baseURL","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","contactName","setContactName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","event","currentTarget","value","reset","onSubmit","preventDefault","find","alert","text","a","post","data","addContact","form","label","input","onChange","type","pattern","title","required","button","Filter","e","target","ContactList","useEffect","get","list","map","id","item","onClick","delete","deleteContact","App","createReducer","_","action","payload","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.135505de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__lybbt\",\"item\":\"ContactList_item__12Uyh\",\"button\":\"ContactList_button__28cZs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1mueb\",\"label\":\"Filter_label__2rNoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2ytEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"App_section__2c5TX\"};","import PropTypes from 'prop-types'\r\nimport styles from './Section.module.css'\r\n\r\nconst Section = ({children}) => {\r\n    return <div className={styles.section}>{children}</div>\r\n}\r\nSection.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n}\r\nexport default Section","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const fetchContactsRequest = createAction(\r\n    'contacts/fetchContactsRequest',\r\n)\r\nexport const fetchContactsSuccess = createAction(\r\n    'contacts/fetchContactsSuccess',\r\n)\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError')\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest')\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess')\r\nexport const addContactError = createAction('contacts/addContactError')\r\n\r\nexport const deleteContactRequest = createAction(\r\n    'contacts/deleteContactRequest',\r\n)\r\nexport const deleteContactSuccess = createAction(\r\n    'contacts/deleteContactSuccess',\r\n)\r\nexport const deleteContactError = createAction('contacts/deleteContactError')\r\n\r\nexport const filterContact = createAction('contacts/filter')","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000'\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest())\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts')\r\n        dispatch(fetchContactsSuccess(data))\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error))\r\n    }\r\n}\r\n\r\nexport const addContact = (text, number) => async dispatch => {\r\n    const contact = {\r\n        name: text,\r\n        number,\r\n    }\r\n\r\n    dispatch(addContactRequest())\r\n\r\n    try {\r\n        const { data } = await axios.post('/contacts', contact)\r\n        dispatch(addContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(addContactError(error))\r\n    }\r\n}\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n    try {\r\n        await axios.delete(`contacts/${id}`)\r\n        dispatch(deleteContactSuccess(id))\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error))\r\n    }\r\n}","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items\r\nexport const getFilter = state => state.contacts.filter\r\n\r\nexport const getFilteredContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase()\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        )\r\n    },\r\n)","import {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addContact} from \"../../Redux/contacts/contacts-operations\";\r\nimport {getContacts} from \"../../Redux/contacts/contacts-selector\";\r\nimport styles from './ContactForm.module.css'\r\n\r\n\r\nexport default function ContactForm() {\r\n    const [contactName, setContactName] = useState('');\r\n    const [number, setNumber] = useState('')\r\n    const contacts = useSelector(getContacts)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleInputChange = event => {\r\n        const {name, value} = event.currentTarget\r\n        switch (name) {\r\n            case 'name' :\r\n                setContactName(value);\r\n                break;\r\n            case 'number' :\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleSubmit = event => {\r\n        event.preventDefault()\r\n        const isExistedName = contacts.find(\r\n            contact => contact.name.toLowerCase() === contactName.toLowerCase(),\r\n        )\r\n        if (isExistedName) {\r\n            alert(contactName + 'is already in contacts')\r\n            return\r\n        }\r\n        dispatch(addContact(contactName, number))\r\n        reset()\r\n    }\r\n    const reset = () => {\r\n        setContactName('')\r\n        setNumber('')\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n            <label className={styles.label}> Name\r\n                <input className={styles.input}\r\n                       onChange={handleInputChange}\r\n                       value={contactName}\r\n                       type=\"text\"\r\n                       name=\"name\"\r\n                       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                       required\r\n                />\r\n            </label>\r\n            <label className={styles.label}> Number\r\n                <input className={styles.input}\r\n                       onChange={handleInputChange}\r\n                       value={number}\r\n                       type=\"tel\"\r\n                       name=\"number\"\r\n                       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                       title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                       required\r\n                />\r\n            </label>\r\n            <button type=\"Submit\" className={styles.button}>Add</button>\r\n        </form>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {filterContact} from \"../../Redux/contacts/contacts-actions\";\r\nimport {getFilter} from \"../../Redux/contacts/contacts-selector\";\r\nimport styles from './Filter.module.css'\r\n\r\nexport default function Filter() {\r\n    const value = useSelector(getFilter)\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <label className={styles.label}>\r\n            <input className={styles.input} type='text'\r\n            value={value}\r\n            onChange={e => dispatch(filterContact(e.target.value))}/>\r\n        </label>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './ContactList.module.css'\r\n\r\nimport {\r\n    fetchContacts,\r\n    deleteContact,\r\n} from '../../Redux/contacts/contacts-operations';\r\nimport { getFilteredContacts } from '../../Redux/contacts/contacts-selector';\r\n\r\n\r\n\r\nexport default function ContactList() {\r\n    const contacts = useSelector(getFilteredContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ol className={styles.list}>\r\n            {contacts.map(({ id, name, number }) => {\r\n                return (\r\n                    <li key={id} className={styles.item}>\r\n                        {name}: <span >{number}</span>\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.button}\r\n                            onClick={() => dispatch(deleteContact(id))}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ol>\r\n    );\r\n}","import Section from \"./components/Section/Section\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport styles from './App.module.css'\n\nexport default function App() {\n    return (\n        <Section>\n            <div className={styles.section}>\n                <h1>Phonebook</h1>\n                <ContactForm/>\n                <h2>Contacts</h2>\n                <Filter/>\n                <ContactList/>\n            </div>\n        </Section>\n    )\n}\n\n\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\n\r\nimport {\r\n    fetchContactsSuccess,\r\n    addContactSuccess,\r\n    deleteContactSuccess,\r\n    filterContact,\r\n} from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (_, action) => action.payload,\r\n    [addContactSuccess]: (state, action) => [...state, action.payload],\r\n    [deleteContactSuccess]: (state, action) =>\r\n        state.filter(({ id }) => id !== action.payload),\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (_, action) => action.payload,\r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducers';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware(),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n                <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3I0cD\",\"label\":\"ContactForm_label__XJRSM\",\"input\":\"ContactForm_input__sUnZA\",\"button\":\"ContactForm_button__M9qH9\"};"],"sourceRoot":""}